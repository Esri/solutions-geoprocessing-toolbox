# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# HLZTouchdownPoints.py
# Created on: 2013-07-15 10:06:42.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: HLZTouchdownPoints <Helicopter> <Areas_layer> <Slope_Layer> <Output_Geodatabase> <Touchdown_Points_Dataset_Name> <Touchdown_Points_Dataset> 
# Description: 
# Within areas suitable for HLZs, identifies potential touchdown points for specific aircraft within those zones.

# ---------------------------------------------------------------------------

# Set the necessary product code
# import arcinfo


# Import arcpy module
import arcpy

# Check out any necessary licenses
arcpy.CheckOutExtension("spatial")

# Load required toolboxes
arcpy.ImportToolbox("Model Functions")
arcpy.ImportToolbox("C:/work/dcgsa/huachuca/templates/Helicopter Landing Zone/Maps/Toolboxes/Helicopter Landing Zone Tools.tbx")


try:
    # Script arguments
    Helicopter = arcpy.GetParameterAsText(0)
    if Helicopter == '#' or not Helicopter:
        Helicopter = "AH-1W" # provide a default value if unspecified

    Areas_layer = arcpy.GetParameterAsText(1)
    if Areas_layer == '#' or not Areas_layer:
        Areas_layer = "C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\HelicopterLandingZone.gdb\\T4\\T4_Suitable_areas" # provide a default value if unspecified

    Slope_Layer = arcpy.GetParameterAsText(2)
    if Slope_Layer == '#' or not Slope_Layer:
        Slope_Layer = "C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\Terrain.gdb\\Slope" # provide a default value if unspecified

    Output_Geodatabase = arcpy.GetParameterAsText(3)
    if Output_Geodatabase == '#' or not Output_Geodatabase:
        Output_Geodatabase = "C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\HelicopterLandingZone.gdb" # provide a default value if unspecified

    Touchdown_Points_Dataset_Name = arcpy.GetParameterAsText(4)
    if Touchdown_Points_Dataset_Name == '#' or not Touchdown_Points_Dataset_Name:
        Touchdown_Points_Dataset_Name = "TouchdownPointsDataset" # provide a default value if unspecified

    Touchdown_Points_Dataset = arcpy.GetParameterAsText(5)
    if Touchdown_Points_Dataset == '#' or not Touchdown_Points_Dataset:
        Touchdown_Points_Dataset = "C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\HelicopterLandingZone.gdb\\TouchdownPointsDataset" # provide a default value if unspecified

    # Local variables:
    Selected_Aircraft_Model = Helicopter
    Aircraft_Specifications_View = Selected_Aircraft_Model
    Aircraft_Specifications_Copy = Aircraft_Specifications_View
    MaxSlopeValue = Aircraft_Specifications_Copy
    Slope_LT_MaxSlopeValue = MaxSlopeValue
    Slope_Polys = Slope_LT_MaxSlopeValue
    Dissolved_Slope_Polygons = Slope_Polys
    Projected_Slope_Polygons = Dissolved_Slope_Polygons
    Dissolved_Projected_Layer = Projected_Slope_Polygons
    HLZ_FC_w_Centerpoint_Spacing_Field = Dissolved_Projected_Layer
    HLZ_FC_w_Centerpoint_Spacing_Value = HLZ_FC_w_Centerpoint_Spacing_Field
    TDP_Centerpoint_Distance = HLZ_FC_w_Centerpoint_Spacing_Value
    Output_Fishnet = TDP_Centerpoint_Distance
    HLZ_Singlepart_Area_Grid = Output_Fishnet
    SuitableAreas_Suitable_areas2 = HLZ_Singlepart_Area_Grid
    HLZ_FC_w_Centerpoint_Spacing_Field__2_ = SuitableAreas_Suitable_areas2
    HLZ_FC_w_Centerpoint_Spacing_Value__2_ = HLZ_FC_w_Centerpoint_Spacing_Field__2_
    HLZ_FC_w_Radius_Field = HLZ_FC_w_Centerpoint_Spacing_Value__2_
    HLZ_FC_w_Radius_Value = HLZ_FC_w_Radius_Field
    HLZ_FC_w_Buffer_Field = HLZ_FC_w_Radius_Value
    HLZ_FC_w_Buffer_Value = HLZ_FC_w_Buffer_Field
    HLZ_FC_w_TDP_Area_Field = HLZ_FC_w_Buffer_Value
    HLZ_FC_w_TDP_Area_Value = HLZ_FC_w_TDP_Area_Field
    HLZ_Grid_Small_Areas_Eliminated = HLZ_FC_w_TDP_Area_Value
    Buffered_Areas = HLZ_Grid_Small_Areas_Eliminated
    HLZ_Raw_Area_Grid_ = Buffered_Areas
    Final_HLZ_Area_Grid = HLZ_Raw_Area_Grid_
    TDP_Centerpoints = Final_HLZ_Area_Grid
    TDP_with_Radius_Field = TDP_Centerpoints
    TDP_with_Radius = TDP_with_Radius_Field
    TDP_Circles = TDP_with_Radius
    TDP_Circle_Feature_Class = TDP_Circles
    TDP_Centerpoint_Feature_Class = TDP_Centerpoints
    TDP_Diameter = Aircraft_Specifications_Copy
    Aircraft_Model = "Model"
    Input_Aircraft = "C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\HelicopterLandingZone.gdb\\Aircraft_Specifications"
    Aircraft_Specifications = "C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\HelicopterLandingZone.gdb\\Aircraft_Specifications"
    Slope_Clip = Slope_Layer
    Input_true_constant__1 = "1"
    Output_Spatial_Reference = "PROJCS['WGS_1984_Web_Mercator_Auxiliary_Sphere',GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Mercator_Auxiliary_Sphere'],PARAMETER['False_Easting',0.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',0.0],PARAMETER['Standard_Parallel_1',0.0],PARAMETER['Auxiliary_Sphere_Type',0.0],UNIT['Meter',1.0]];-20037700 -30241100 10000;-100000 10000;-100000 10000;0.001;0.001;0.001;IsHighPrecision"

    # Process: Choose Field Value Script Tool
    arcpy.gp.toolbox = "C:/work/dcgsa/huachuca/templates/Helicopter Landing Zone/Maps/Toolboxes/Helicopter Landing Zone Tools.tbx";
    # Warning: the toolbox C:/work/dcgsa/huachuca/templates/Helicopter Landing Zone/Maps/Toolboxes/Helicopter Landing Zone Tools.tbx DOES NOT have an alias. 
    # Please assign this toolbox an alias to avoid tool name collisions
    # And replace arcpy.gp.DropDownList2(...) with arcpy.DropDownList2_ALIAS(...)
    arcpy.gp.DropDownList2(Input_Aircraft, Aircraft_Model, Helicopter)

    # Process: Make Table View
    arcpy.MakeTableView_management(Aircraft_Specifications, Aircraft_Specifications_View, "Model='%Selected Aircraft Model%'", "", "OBJECTID OBJECTID VISIBLE NONE;Model Model VISIBLE NONE;Nickname Nickname VISIBLE NONE;TDP_Diameter_Meters TDP_Diameter_Meters VISIBLE NONE;Ground_Slope_Max_Degrees Ground_Slope_Max_Degrees VISIBLE NONE;Obstacle_Max_Size_Inches Obstacle_Max_Size_Inches VISIBLE NONE;Crosswind_Max_Knots Crosswind_Max_Knots VISIBLE NONE;Tailwind_Max_Knots Tailwind_Max_Knots VISIBLE NONE;Ground_Slope_Min_Degrees Ground_Slope_Min_Degrees VISIBLE NONE;Obstacle_Min_Size_Inches Obstacle_Min_Size_Inches VISIBLE NONE;Crosswind_Min_Knots Crosswind_Min_Knots VISIBLE NONE;Tailwind_Min_Knots Tailwind_Min_Knots VISIBLE NONE;Slope_Suitability_Value Slope_Suitability_Value VISIBLE NONE;Speed_Suitability_Value Speed_Suitability_Value VISIBLE NONE;Direction_Suitability_Value Direction_Suitability_Value VISIBLE NONE")

    # Process: Copy Rows
    arcpy.CopyRows_management(Aircraft_Specifications_View, Aircraft_Specifications_Copy, "")

    # Process: Get TDP Diameter
    arcpy.GetFieldValue_mb(Aircraft_Specifications_Copy, "TDP_Diameter_Meters", "Long", "0")

    # Process: Clip
    arcpy.Clip_management(Slope_Layer, "7844294.9969 4086097.0724 7844423.6824 4086153.8607", Slope_Clip, Areas_layer, "", "NONE", "NO_MAINTAIN_EXTENT")

    # Process: Get Max Slope
    arcpy.GetFieldValue_mb(Aircraft_Specifications_Copy, "Ground_Slope_Max_Degrees", "Long", "0")

    # Process: Con
    arcpy.gp.Con_sa(Slope_Clip, Input_true_constant__1, Slope_LT_MaxSlopeValue, "", "\"VALUE\" <= %MaxSlopeValue%")

    # Process: Raster to Polygon
    arcpy.RasterToPolygon_conversion(Slope_LT_MaxSlopeValue, Slope_Polys, "SIMPLIFY", "VALUE")

    # Process: Dissolve Slope Polygons
    arcpy.Dissolve_management(Slope_Polys, Dissolved_Slope_Polygons, "", "", "SINGLE_PART", "DISSOLVE_LINES")

    # Process: Create Spatial Reference
    arcpy.CreateSpatialReference_management("PROJCS['WGS_1984_Web_Mercator_Auxiliary_Sphere',GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Mercator_Auxiliary_Sphere'],PARAMETER['False_Easting',0.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',0.0],PARAMETER['Standard_Parallel_1',0.0],PARAMETER['Auxiliary_Sphere_Type',0.0],UNIT['Meter',1.0]];-20037700 -30241100 10000;-100000 10000;-100000 10000;0.001;0.001;0.001;IsHighPrecision", "", "", "", "", "", "0")

    # Process: Project Slope Polygons
    arcpy.Project_management(Dissolved_Slope_Polygons, Projected_Slope_Polygons, Output_Spatial_Reference, "", "PROJCS['WGS_1984_Web_Mercator_Auxiliary_Sphere',GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Mercator_Auxiliary_Sphere'],PARAMETER['False_Easting',0.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',0.0],PARAMETER['Standard_Parallel_1',0.0],PARAMETER['Auxiliary_Sphere_Type',0.0],UNIT['Meter',1.0]]")

    # Process: Make Feature Layer (2)
    arcpy.MakeFeatureLayer_management(Projected_Slope_Polygons, Dissolved_Projected_Layer, "", "", "Shape Shape VISIBLE NONE;OBJECTID OBJECTID VISIBLE NONE")

    # Process: Add Centerpoint Spacing Field
    arcpy.AddField_management(Dissolved_Projected_Layer, "TDP_Centerpoint_Distance", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

    # Process: Calculate Centerpoint Spacing Value
    arcpy.CalculateField_management(HLZ_FC_w_Centerpoint_Spacing_Field, "TDP_Centerpoint_Distance", "%TDP_Diameter%*1.5", "VB", "")

    # Process: Get Centerpoint Distance
    arcpy.GetFieldValue_mb(HLZ_FC_w_Centerpoint_Spacing_Value, "TDP_Centerpoint_Distance", "String", "0")

    # Process: MinimumBoundingFishnet
    arcpy.gp.toolbox = "C:/work/dcgsa/huachuca/templates/Helicopter Landing Zone/Maps/Toolboxes/Helicopter Landing Zone Tools.tbx";
    # Warning: the toolbox C:/work/dcgsa/huachuca/templates/Helicopter Landing Zone/Maps/Toolboxes/Helicopter Landing Zone Tools.tbx DOES NOT have an alias. 
    # Please assign this toolbox an alias to avoid tool name collisions
    # And replace arcpy.gp.MinimumBoundingFishnet(...) with arcpy.MinimumBoundingFishnet_ALIAS(...)
    arcpy.gp.MinimumBoundingFishnet(Areas_layer, Output_Fishnet, "NONE", "", TDP_Centerpoint_Distance, TDP_Centerpoint_Distance, "0", "0", "NO_LABELS")

    # Process: Split HLZ Regions
    arcpy.MultipartToSinglepart_management(Output_Fishnet, HLZ_Singlepart_Area_Grid)

    # Process: Intersect
    arcpy.Intersect_analysis("'C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\Scratch.gdb\\SuitableAreas_Suitable_areas1' #;'C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\HelicopterLandingZone.gdb\\T4\\T4_Suitable_areas' #", SuitableAreas_Suitable_areas2, "ALL", "", "INPUT")

    # Process: Add Centerpoint Spacing Field (2)
    arcpy.AddField_management(SuitableAreas_Suitable_areas2, "TDP_Centerpoint_Distance", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

    # Process: Calculate Centerpoint Spacing Value (2)
    arcpy.CalculateField_management(HLZ_FC_w_Centerpoint_Spacing_Field__2_, "TDP_Centerpoint_Distance", "%TDP_Diameter%*1.5", "VB", "")

    # Process: Add Radius Field
    arcpy.AddField_management(HLZ_FC_w_Centerpoint_Spacing_Value__2_, "TDP_Radius", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

    # Process: Calculate Radius Field
    arcpy.CalculateField_management(HLZ_FC_w_Radius_Field, "TDP_Radius", "%TDP_Diameter%/2", "VB", "")

    # Process: Add TDP Interior Buffer Field
    arcpy.AddField_management(HLZ_FC_w_Radius_Value, "TDP_Interior_Buffer", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

    # Process: Calculate TDP Interior Buffer Value
    arcpy.CalculateField_management(HLZ_FC_w_Buffer_Field, "TDP_Interior_Buffer", "-!TDP_Radius!/2", "PYTHON", "")

    # Process: Add Minimum TDP Area Field
    arcpy.AddField_management(HLZ_FC_w_Buffer_Value, "TDP_Minimum_Area", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

    # Process: Calculate Minimum TDP Area Field
    arcpy.CalculateField_management(HLZ_FC_w_TDP_Area_Field, "TDP_Minimum_Area", "pi * ( !TDP_Radius! * !TDP_Radius!)", "PYTHON", "pi = math.pi")

    # Process: Initial Elimination of Small Areas
    arcpy.Select_analysis(HLZ_FC_w_TDP_Area_Value, HLZ_Grid_Small_Areas_Eliminated, "\"Shape_Area\" >= \"TDP_Minimum_Area\"")

    # Process: Buffer
    arcpy.Buffer_analysis(HLZ_Grid_Small_Areas_Eliminated, Buffered_Areas, "TDP_Interior_Buffer", "FULL", "ROUND", "NONE", "")

    # Process: Select to eliminate small areas
    arcpy.Select_analysis(Buffered_Areas, HLZ_Raw_Area_Grid_, "\"Shape_Area\" >= \"TDP_Minimum_Area\"")

    # Process: Split Buffer Polygons
    arcpy.MultipartToSinglepart_management(HLZ_Raw_Area_Grid_, Final_HLZ_Area_Grid)

    # Process: Feature To Point
    arcpy.FeatureToPoint_management(Final_HLZ_Area_Grid, TDP_Centerpoints, "INSIDE")

    # Process: Add TDP Radius
    arcpy.AddField_management(TDP_Centerpoints, "Desired_TDP_Radius", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

    # Process: Calculate TDP Radius
    arcpy.CalculateField_management(TDP_with_Radius_Field, "Desired_TDP_Radius", "%TDP_Diameter%/2", "VB", "")

    # Process: Create TDP Circle
    arcpy.Buffer_analysis(TDP_with_Radius, TDP_Circles, "Desired_TDP_Radius", "FULL", "ROUND", "NONE", "")

    # Process: Create Feature Dataset
    arcpy.CreateFeatureDataset_management(Output_Geodatabase, Touchdown_Points_Dataset_Name, Output_Spatial_Reference)

    # Process: Create TDP Centerpoint Feature Class
    arcpy.FeatureClassToFeatureClass_conversion(TDP_Centerpoints, Touchdown_Points_Dataset, "%Touchdown Points Dataset Name%_TDP_Centerpoints", "", "ORIG_FID \"ORIG_FID\" true true false 0 Long 0 0 ,First,#,C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\Scratch.gdb\\SuitableAreas_Suitable_areas14,ORIG_FID,-1,-1;FID_T4_Suitable_areas \"FID_T4_Suitable_areas\" true true false 0 Long 0 0 ,First,#,C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\Scratch.gdb\\SuitableAreas_Suitable_areas14,FID_T4_Suitable_areas,-1,-1;Shape_Length \"Shape_Length\" true true true 8 Double 0 0 ,First,#,C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\Scratch.gdb\\SuitableAreas_Suitable_areas14,Shape_Length,-1,-1;Shape_Area \"Shape_Area\" true true true 8 Double 0 0 ,First,#,C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\Scratch.gdb\\SuitableAreas_Suitable_areas14,Shape_Area,-1,-1;TDP_Centerpoint_Distance \"TDP_Centerpoint_Distance\" true true false 0 Double 0 0 ,First,#,C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\Scratch.gdb\\SuitableAreas_Suitable_areas14,TDP_Centerpoint_Distance,-1,-1;TDP_Radius \"TDP_Radius\" true true false 0 Double 0 0 ,First,#,C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\Scratch.gdb\\SuitableAreas_Suitable_areas14,TDP_Radius,-1,-1;TDP_Interior_Buffer \"TDP_Interior_Buffer\" true true false 0 Double 0 0 ,First,#,C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\Scratch.gdb\\SuitableAreas_Suitable_areas14,TDP_Interior_Buffer,-1,-1;TDP_Minimum_Area \"TDP_Minimum_Area\" true true false 0 Double 0 0 ,First,#,C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\Scratch.gdb\\SuitableAreas_Suitable_areas14,TDP_Minimum_Area,-1,-1;BUFF_DIST \"BUFF_DIST\" true true false 0 Double 0 0 ,First,#,C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\Scratch.gdb\\SuitableAreas_Suitable_areas14,BUFF_DIST,-1,-1", "")

    # Process: Create TDP Circle Feature Class
    arcpy.FeatureClassToFeatureClass_conversion(TDP_Circles, Touchdown_Points_Dataset, "%Touchdown Points Dataset Name%_TDP_Circles", "", "ORIG_FID \"ORIG_FID\" true true false 0 Long 0 0 ,First,#,C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\Scratch.gdb\\SuitableAreas_Suitable_areas15,ORIG_FID,-1,-1;FID_T4_Suitable_areas \"FID_T4_Suitable_areas\" true true false 0 Long 0 0 ,First,#,C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\Scratch.gdb\\SuitableAreas_Suitable_areas15,FID_T4_Suitable_areas,-1,-1;Shape_Length \"Shape_Length\" true true true 8 Double 0 0 ,First,#,C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\Scratch.gdb\\SuitableAreas_Suitable_areas15,Shape_Length,-1,-1;Shape_Area \"Shape_Area\" true true true 8 Double 0 0 ,First,#,C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\Scratch.gdb\\SuitableAreas_Suitable_areas15,Shape_Area,-1,-1;TDP_Centerpoint_Distance \"TDP_Centerpoint_Distance\" true true false 0 Double 0 0 ,First,#,C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\Scratch.gdb\\SuitableAreas_Suitable_areas15,TDP_Centerpoint_Distance,-1,-1;TDP_Radius \"TDP_Radius\" true true false 0 Double 0 0 ,First,#,C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\Scratch.gdb\\SuitableAreas_Suitable_areas15,TDP_Radius,-1,-1;TDP_Interior_Buffer \"TDP_Interior_Buffer\" true true false 0 Double 0 0 ,First,#,C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\Scratch.gdb\\SuitableAreas_Suitable_areas15,TDP_Interior_Buffer,-1,-1;TDP_Minimum_Area \"TDP_Minimum_Area\" true true false 0 Double 0 0 ,First,#,C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\Scratch.gdb\\SuitableAreas_Suitable_areas15,TDP_Minimum_Area,-1,-1;BUFF_DIST \"BUFF_DIST\" true true false 0 Double 0 0 ,First,#,C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\Scratch.gdb\\SuitableAreas_Suitable_areas15,BUFF_DIST,-1,-1;Desired_TDP_Radius \"Desired_TDP_Radius\" true true false 0 Double 0 0 ,First,#,C:\\work\\dcgsa\\huachuca\\templates\\Helicopter Landing Zone\\Maps\\Scratch.gdb\\SuitableAreas_Suitable_areas15,Desired_TDP_Radius,-1,-1", "")


except arcpy.ExecuteError: 
    # Get the tool error messages 
    msgs = arcpy.GetMessages() 
    arcpy.AddError(msgs) 
    print msgs

except:
    # Get the traceback object
    tb = sys.exc_info()[2]
    tbinfo = traceback.format_tb(tb)[0]

    # Concatenate information together concerning the error into a message string
    pymsg = "PYTHON ERRORS:\nTraceback info:\n" + tbinfo + "\nError Info:\n" + str(sys.exc_info()[1])
    msgs = "\nArcPy ERRORS:\n" + arcpy.GetMessages() + "\n"

    # Return python error messages for use in script tool or Python Window
    arcpy.AddError(pymsg)
    arcpy.AddError(msgs)

    # Print Python error messages for use in Python / Python Window
    print pymsg + "\n"
    print msgs

finally:
    # cleanup intermediate datasets
    if DEBUG == True: arcpy.AddMessage("Removing intermediate datasets...")
    for i in delete_me:
        if DEBUG == True: arcpy.AddMessage("Removing: " + str(i))
        arcpy.Delete_management(i)
    if DEBUG == True: arcpy.AddMessage("Done")