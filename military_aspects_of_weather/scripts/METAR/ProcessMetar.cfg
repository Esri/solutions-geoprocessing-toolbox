#################################################################################################
#
# Configuration file for Metar data processor - ProcessMetar.py, v1.0.2, Mar 2012 - Paul Dodd, esri
#
# When making changes: Keep in mind that the contents of this file are injected in to a Python Class at
# execution time, so please follow Python coding practices. Need help? http://docs.python.org/index.html 
#
# Variables that influence/override Main processing options include:
# 'nickName', 'workPath', 'logPath', 'logRetention', 'importPath', 'fileGDB', 'featureClass',
# 'outputCoordSys', 'outputTransformation', 'outputSpatialIndexGrid', 'addRegistration', and
# 'updateUsingCurrentCycle'
#

nickName = "CurrentMetar"				# Reported 'Name' of routine
logRetention = 3					# Number of Months to keep logs on-hand

##########################
# Folder Paths (supports Relative, Absolute, and UNC file system paths)
# (if backslash required, remember to use double backslash '\\' in Python strings)
#
workPath = "Work"					# Work folder for output processing
logPath = "Logs"					# Log folder for activity and error logs
importPath = "..\METAR"				# Path to User-defined Python utilities folder (common script location)

##########################
# Output Workspace details
#
fileGDB = "Metar"					# Name of File Geodatabase
featureClass = "CurrentMetar"			# Name of Featureclass
outputCoordSys = 4326					# Coordinate System, 4326 = WGS 1984 (in degrees); 102100 = WGS 1984 Web Mercator Auxiliary Sphere (in meters)
outputTransformation = None			# Coordinate System Transformation from WGS1984 to 'outputCoordSys' (if required)
outputSpatialIndexGrid = [ 23, 0, 0]		# Spatial Index Grid values [ g0, g1, g2] in units of 'outputCoordSys'
addRegistration = True				# Should output include Min/Max Extent Registration Features (2 in all)?
								# (highly recommended when maintaining output for published services)
updateUsingCurrentCycle = False			# Use Last Full and Current Cycles of Metar data to update Workspace (more current
                                          	# and complete data. Can be run more frequently, every 5~15 minutes vs every hr)

##########################
# User-defined variables (only used locally)
#
livePath = "LiveData"				# Folder where published data will be served from
zipArchive = "CurrentMetar.zip"		# Name of Zip Archive file
zipCompress = True				# True or False, whether to compress content or store as uncompressed

########################
# Deployment Functions #
########################

###########################################################################################
# Note: Call internal function 'self.logMessage( String)' to Log a message to the Archive #
#       log for posterity. Ideal for recording any summary details you may want to track. #
###########################################################################################

def deploy( self, workspace):
	# If present, this Function will be called by the main process
	# to allow user-defined deployment of newly created content.
	#
	#      'self' = object instance of this configuration class. All local
	#               Functions and Variables can be accessed from here.
	# 'workspace' = formal Path to File Geodatabase content created.
	#
	# (below) Remove comment in front of desired routine, or add you own, it's up to you!
	
	self.copyLive( workspace)
	
	#self.archive( workspace)

################################
# Custom Functions and Classes #
################################

def copyLive( self, workspace):
	import fnmatch, os, shutil, sys, arcpy
	
	#
	# Module designed to copy FileGDB to 'Live' location, overwriting content of files being served!
	#
	
	# Get Absolute (not relative) Path to Live location
	livePath = os.path.realpath( self.livePath)
	
	print "  Copying Workspace:\n    '{0}'\n  to folder:\n    '{1}'...".format( workspace, livePath)
	
	workPath, fileGeodatabase = os.path.split( workspace)
	dest = os.path.join( livePath, fileGeodatabase)
	
	filesCopied = 0
	filesOverwritten = 0
	filesSkipped = 0
	
	# Does destination folder exist?
	if os.access( dest, os.F_OK):
		# Yes, perform File-level copy, ignoring 'lock' files
		for file in os.listdir( workspace):
			if not fnmatch.fnmatch( file, '*.lock'):
				src = os.path.join( workspace, file)
				
				overWrite = os.access( os.path.join( dest, file), os.F_OK)
				
				if overWrite:
					sys.stderr.write( "    Overwriting: '{0}'\n".format( file))
				else:
					sys.stderr.write( "    Copying: '{0}'\n".format( file))
				
				try:
					shutil.copy2( src, dest)
					
					if overWrite:
						filesOverwritten += 1
					else:
						filesCopied += 1
				
				except Exception as e:
					filesSkipped += 1
					print " * Unable to copy file '{0}':\n   {1}".format( src, e)
	else:
		# No, perform bulk copy (first-time run)
		try:
			# Issue copy, ignoring 'lock' files
			shutil.copytree( workspace, dest, None, shutil.ignore_patterns( '*.lock'))
		
		except shutil.Error as e:
			for Error, errors in e:
				for src, dest, err in errors:
					filesSkipped += 1
					print " * Unable to copy '{0}':\n   {1}".format( src, err)
		
		filesCopied = len(os.listdir( dest))
	
	print "\n       Files Copied: {0: 3d}".format( filesCopied)
	print "  Files Overwritten: {0: 3d}".format( filesOverwritten)
	print "      Files Skipped: {0: 3d}".format( filesSkipped)
	self.logMessage( "Deployment files Copied: {0}, Overwritten: {1}, Skipped: {2}".format( filesCopied, filesOverwritten, filesSkipped))

	#
	# Addition for MAoW Template - to copy feature class to the MAoW.gdb (added by David Martin to support the MAoW template)
	self.logMessage("Copying data to MAoW (" + dest + ")")

	# Get the path to the feature class within the live Metar File Geodatabase
	fcFrom = os.path.join(dest, self.featureClass)

	# The path to the MAoW.gdb is a fixed relative path within this template
	maowGdb = os.path.realpath(dest + "..\\..\\..\\..\\MAoW.gdb")

	# Get the path to the CurrentConditions feature class within MAoW.gdb
	fcTo = os.path.join(maowGdb, "CurrentConditions")

	print "Deleting rows from CurrentConditions feature class..."

	# Delete the current contents of CurrentConditions
	arcpy.DeleteRows_management(fcTo)

	print "Appending latest Metar data to CurrentConditions feature class..."

	# Copy the fresh Metar data to the CurrentConditions table
	arcpy.Append_management(fcFrom, fcTo, "NO_TEST", "", "")

	self.logMessage("Appended latest Metar data to the MAoW CurrentConditions feature class")

#
# Archive (zip) routine
#

def archive( self, workspace):
	import fnmatch, os, sys, zipfile, zlib
	
	#
	# Module designed to Archive FileGDB content to a Zip file.
	#
	
	# Get Absolute (not relative) Path to Zip file
	zipArchive = os.path.realpath( self.zipArchive)
	
	print "  Zipping Workspace:\n    '{0}'\n  to Archive:\n    '{1}'...".format( workspace, zipArchive)
	
	# Open Zip file for Write
	if self.zipCompress:
		zipFile = zipfile.ZipFile( zipArchive, 'w', zipfile.ZIP_DEFLATED)
	else:
		zipFile = zipfile.ZipFile( zipArchive, 'w', zipfile.ZIP_STORED)
	
	workPath, fileGeodatabase = os.path.split( workspace)
	
	if workPath:
		# Change Directory to Path right above FileGDB directory
		# (to avoid recording full file system path in archive)
		os.chdir( workPath)
	
	# Add files to Zip Archive, ignoring 'lock' files
	count = 0
	sys.stderr.write( "\n")
	for file in os.listdir( fileGeodatabase):
		if not fnmatch.fnmatch( file, '*.lock'):
			src = os.path.join( fileGeodatabase, file)
			sys.stderr.write( "    Adding '{0}'...\n".format( src))
			zipFile.write( src)
			count += 1
	
	if count:
		print "\n  Archived a total of {0} files!\n".format( count)
	
	zipFile.close()	# Flush buffers
	
	# Verify Archive
	print "  Verifying Archive..."
	
	zipFile = zipfile.ZipFile( zipArchive, 'r')	# Re-Open archive
	firstError = zipFile.testzip()
	
	if firstError:
		sys.exit( " * Zip Archive FAILED verification on file: '{0}'\n".format( firstError))
	else:
		print "    Passed!"
		self.logMessage( "Successfully archived {0} files!".format( count))
	
	zipFile.close()
